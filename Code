# Импорт необходимых модулей из flask для создания веб-приложения
from flask import Flask, render_template, request, redirect, url_for
from flask_bootstrap5 import Bootstrap

# Импорт библиотек для работы с базой данных PostgreSQL
import psycopg2
from psycopg2.extras import RealDictCursor

# Импорт стандартных и асинхронных библиотек Python
import os
import random
import threading
import asyncio

# Импорт библиотек для работы с Telegram Bot API
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler,
                          CallbackQueryHandler, MessageHandler,
                          ContextTypes, filters)

# Создание объекта Flask приложения
app = Flask(__name__)

# Инициализация Bootstrap дополнения для Flask
bootstrap = Bootstrap(app)

# URL подключения к базе данных PostgreSQL из переменной окружения или значения по умолчанию
DATABASE_URL = os.getenv('DATABASE_URL', 'postgres://postgres:THE_BEST_PA$$WORD@localhost/laba')

# Функция для получения соединения с базой данных PostgreSQL
def get_db_connection():
    # Соединение с указанной БД, используя RealDictCursor для возврата данных в виде словаря
    conn = psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)
    return conn

# Главная страница сайта
@app.route('/')
def index():
    # Рендеринг шаблона HTML 'index.html'
    return render_template('index.html')

# Страница для отображения пользователей
@app.route('/users')
def users():
    # Получение соединения с БД и курсора
    conn = get_db_connection()
    cursor = conn.cursor()

    # Выполнение SQL-запроса на получение всех пользователей из таблицы "userss"
    cursor.execute("SELECT * FROM userss")
    users = cursor.fetchall()

    # Закрытие соединения с БД
    conn.close()

    # Рендеринг шаблона 'users.html' с данными пользователей
    return render_template('users.html', users=users)

# Страница для управления Telegram ботом
@app.route('/manage_bot', methods=['GET', 'POST'])
def manage_bot():
    if request.method == 'POST':
        # Получение текстовых данных из формы
        button_text = request.form.get('button_text')
        command = request.form.get('callback_data')

        # Добавление нового пользовательского действия (кнопки) в Telegram бот
        add_telegram_button(button_text, command)

        # Перенаправление обратно на страницу управления ботом
        return redirect(url_for('manage_bot'))

    # Рендеринг шаблона 'manage_bot.html'
    return render_template('manage_bot.html')

# Токен для Telegram бота
TOKEN = '7817689175:AAHDd4O9asAw2AArkmX7_PQ2cewI6MoCD48'

# Список слов для игры и их подсказок
words = ["кошка", "собака", "машина", "дерево", "река", "дом", "цветок", "стол", "книга"]
hints = {
    "кошка": "Это домашнее животное, часто ловит мышей.",
    "собака": "Верный друг человека.",
    "машина": "Транспортное средство на колесах.",
    "дерево": "Это растет в лесу и в парках.",
    "река": "Течет и впадает в море или океан.",
    "дом": "Место, где люди живут.",
    "цветок": "Красивый и часто пахучий элемент растений.",
    "стол": "Мебель для работы или еды.",
    "книга": "Многостраничный объект для чтения."
}

# Временное хранилище пользовательских кнопок
custom_buttons = []

# Функция добавления пользовательской кнопки в сами кнопки
def add_telegram_button(text, callback_data):
    # Добавление новой кнопки в оперативную память
    custom_buttons.append({'text': text, 'callback_data': callback_data})

# Асинхронная функция, отвечающая за регистрацию пользователя через Telegram
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Получение из сообщения или callback-запроса
    message = update.message or update.callback_query.message

    # Ответ пользователю с инструкцией по регистрации
    await message.reply_text(
        'Для регистрации введите ваш уникальный Telegram ID и имя пользователя через пробел.\nПример: 12345678 Tanya')

# Обработка регистрации с введёнными данными пользователя
async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Получение из сообщения или callback-запроса
    message = update.message or update.callback_query.message

    try:
        # Извлечение текста сообщения
        text = update.message.text.strip()
        telegram_id, username = text.split(' ', 1)

        # Подключение к БД и выполнение SQL-запроса на добавление нового пользователя
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO userss (telegram_id, username) VALUES (%s, %s)", (telegram_id, username))
        conn.commit()

        # Закрытие соединения с БД
        conn.close()

        # Ответ пользователю об успешной регистрации
        await message.reply_text(f'Вы успешно зарегистрированы как {username} с Telegram ID {telegram_id}.')
    except ValueError:
        # Ответ пользователю в случае неверного формата данных
        await message.reply_text('Пожалуйста, введите ваш Telegram ID и имя пользователя через пробел.')
    except Exception as e:
        # Ответ пользователю в случае любой другой ошибки
        await message.reply_text(f'Ошибка при регистрации: {e}')

# Стартовая команда для Telegram бота
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Создание клавиатуры с кнопками
    keyboard = [
        [InlineKeyboardButton("Факты", callback_data='fact')],
        [InlineKeyboardButton("Помощь", callback_data='help')],
        [InlineKeyboardButton("Игра", callback_data='play')],
        [InlineKeyboardButton("Регистрация", callback_data='register')],
    ]

    # Добавление пользовательских кнопок
    for button in custom_buttons:
        keyboard.append([InlineKeyboardButton(button['text'], callback_data=button['callback_data'])])

    # Отправка сообщения с клавиатурой
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('Привет! Я должен служить тебе. Выберите опцию:', reply_markup=reply_markup)

# Команда помощи для Telegram бота
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Получение из сообщения или callback-запроса
    message = update.message or update.callback_query.message

    # Ответ пользователю с описанием команд
    await message.reply_text(
        'Доступные команды:\n/start - начало работы\n/fact - факт о воде\n/play - игра в слова\n/register - регистрация\n/help - помощь')

# Команда выдачи случайного факта для Telegram бота
async def fact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Получение из сообщения или callback-запроса
    message = update.message or update.callback_query.message

    # Список фактов о воде
    facts = [
        "Вода составляет примерно 71% поверхности Земли.",
        "Около 1/6 всего объема воды содержится в ледяных шапках и ледниках.",
        "Вода в жидком состоянии является фазой, в которой водные молекулы соединены водородными связями."
    ]

    # Выбор случайного факта и отправка его пользователю
    random_fact = random.choice(facts)
    await message.reply_text(f"Вот интересный факт о воде: {random_fact}")

# Команда игры в Telegram боте
async def play(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Получение из сообщения или callback-запроса
    message = update.message or update.callback_query.message

    # Выбор слова для игры и сохранение данных о ходе игры в контекст пользователя
    word = random.choice(words)
    context.user_data['play'] = {
        'word': word,
        'hints_used': 0
    }

    # Сообщение пользователю о начале игры
    await message.reply_text("Я загадал слово, попробуй угадать его! Чтобы завершить игру, напишите /stop.")


# Проверка отгадки пользователя
async def check_guess(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Получение из сообщения или callback-запроса
    message = update.message or update.callback_query.message

    # Проверка наличия активной игры
    if 'play' not in context.user_data:
        await message.reply_text("У вас нет активной игры. Начните ее с команды /play.")
        return

    # Извлечение отгадки пользователя и данных игры
    user_guess = update.message.text.strip().lower()
    game_data = context.user_data['play']
    correct_word = game_data['word']

    # Различные варианты завершения игры и ответы пользователю
    if user_guess == '/stop':
        await message.reply_text("Игра была остановлена. Спасибо за игру!")
        del context.user_data['play']  # Удаление данных игры из контекста пользователя
    elif user_guess == correct_word:
        await message.reply_text(f"Да! Ты угадал слово: {correct_word}. Поздравляю!")
        del context.user_data['play']
    else:
        game_data['hints_used'] += 1
        if game_data['hints_used'] == 1:
            hint = hints.get(correct_word, "Без подсказки.")
            await message.reply_text(f"Нет, не угадал. Вот подсказка: {hint}")
        else:
            await message.reply_text("Нет, не угадал. Попробуй еще раз! Или напиши /stop")


# Обработчик для нажатий на inline-кнопки в Telegram
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()  # Отправка ответа на callback запрос для завершения 'временного ожидания' клиента 
    command = query.data  # Получение данных о вызванной команде

    # Проверка и запуск соответствующей команды
    if command == 'fact':
        await fact(query, context)
    elif command == 'help':
        await help_command(query, context)
    elif command == 'play':
        await play(query, context)
    elif command == 'register':
        await register(query, context)
    else:
        # Обработка пользовательских команд
        await query.edit_message_text(f'Вы вызвали команду: {command}')


# Функция запуска Flask-приложения
def run_flask():
    app.run(port=5000, use_reloader=False)  # Запуск на локальном сервере на порту 5000

# Обработчик ошибок в Telegram боте
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f'Ошибка: {context.error}')  # Вывод ошибки в консоль
    try:
        # Проверка и отправка сообщений об ошибке пользователю
        if update.effective_message:
            await update.effective_message.reply_text('Произошла ошибка. Пожалуйста, попробуйте снова позже.')
    except:
        pass

# Функция запуска Telegram бота
def run_telegram_bot():
    asyncio.set_event_loop(asyncio.new_event_loop())  # Инициализация нового event loop для asyncio
    application = ApplicationBuilder().token(TOKEN).build()  # Создание объекта Telegram приложения

    # Добавление обработчиков команд и событий
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("fact", fact))
    application.add_handler(CommandHandler("play", play))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_registration))
    application.add_handler(CommandHandler("stop", check_guess))
    application.add_handler(CommandHandler("register", register))
    application.add_error_handler(error_handler)

    # Запуск бота с polling'ом
    application.run_polling()

# Основная проверка запуска программы
if __name__ == "__main__":
    # Создание и запуск потоков для Flask приложения и Telegram бота
    flask_thread = threading.Thread(target=run_flask)
    telegram_thread = threading.Thread(target=run_telegram_bot)

    # Запуск созданных потоков
    flask_thread.start()
    telegram_thread.start()

    # Ожидание завершения потоков
    flask_thread.join()
    telegram_thread.join()
